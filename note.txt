main 
-> spimi:start 
-> spimi:processFile	find doc and goto processDoc to handle the rest of the lines
-> spimi:processDoc	put terms of one document in set<string>
-> spimi:updateDict	for each term in set, insert into dict
-> dict:insert		
-> indexList:push




dict::writeToFile	for every <term, termId> in mp,
				write (	term_length, 
					term, 
					term_docFreq, 
					buf_size as offset,
					{all values/docIDs in buf}, 
					bit, 
					last docID
					)


merger::merge
-> merger::mergeTwo	read and compare term order and write and writeRest

spimi::generateDictIdx	idx write (all docIDs, bit, last docID)
->cd::generateDict	make dict (df, term_offset_in_dict, offset_in_idx)
->cd::writeToFile	dict write (term total length, all terms, {df, term_offset_in_dict, offset_in_idx})